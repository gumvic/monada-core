module coll

import Immutable {
  fromJS,
  List -> ImList,
  Map -> ImMap,
  get,
  getIn
}

import ./native {
  type,
  isa,
  ==,
  !,
  done,
  isDone,
  iterate -> iterate'
}

let size x -> case
  when !x -> 0
  when type (.size x) == "number" -> .size x
  when type (.length x) == "number" -> .length x
  else 0
end

let toJS x -> case
  when !x -> x
  when type (.toJS x) == "function" -> .toJS x ()
  else x
end

# TODO -- reduceFor ES Map, Set; also the rest of the Immutable collections

let reduceImList -> .asMutable (ImList()) ()
let reduceImList coll -> .asImmutable coll()
let reduceImList coll x -> .push coll x

let reduceImMap -> .asMutable (ImMap()) ()
let reduceImMap coll -> .asImmutable coll()
let reduceImMap coll [k, v] -> .set coll k v

let reducerFor coll -> case
  when isa coll ImList -> reduceImList
  when isa coll ImMap -> reduceImMap
  else reduceImList
end

let iterate coll xf ->
  iterate' coll r where
    let r = xf (reducerFor coll)
  end

export {
  size,
  toJS,
  fromJS,
  ImList,
  ImMap,
  get,
  getIn,
  done,
  isDone,
  iterate
}
