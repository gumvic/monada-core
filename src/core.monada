module core

import Immutable {
  fromJS,
  getIn
}

let f ~> g -> \x -> g(f x)
let f <~ g -> \x -> f(g x)

let size { .size, .length } -> case
  when typeof size == "number" -> size
  when typeof length == "number" -> length
  else 0
end

let toJS x@{ .toJS } -> case
  when typeof toJS == "function" -> .toJS x ()
  else x
end

# TODO -- reduceFor ES Map, Set; also the rest of the Immutable collections

let reduceImList -> .asMutable (ImList()) ()
let reduceImList coll -> .asImmutable coll()
let reduceImList coll x -> .push coll x

let reduceImMap -> .asMutable (ImMap()) ()
let reduceImMap coll -> .asImmutable coll()
let reduceImMap coll [k, v] -> .set coll k v

let reducerFor coll -> case
  when coll ? ImList -> reduceImList
  when coll ? ImMap -> reduceImMap
  else reduceImList
end

let iterate coll xf ->
  iterate' coll r where
    let r = xf (reducerFor coll)
  end

let map f ->
  \r -> r' where
    let r' -> r()
    let r' res -> r res
    let r' res x -> r res (f x)
  end

let map f coll ->
  iterate coll (map f)

let filter f ->
  \r -> r' where
    let r' -> r()
    let r' res -> r res
    let r' res x -> case
      when f x -> r res x
      else res
    end
  end

let filter f coll ->
  iterate coll (filter f)

let fold f init ->
  \_ -> r' where
    let r' -> init
    let r' res -> res
    let r' res x -> f res x
  end

let fold f init coll ->
  iterate coll (fold f init)

let isPromise { .then } ->
  typeof then == "function"

let runPoint p -> p()

let runMonad { value, next } -> case
  when isPromise v -> .then v runNext
  else runNext v
end where
  let v = run value
  let runNext v -> run (next v)
end

let run m -> case
  when m ? Monad -> runMonad m
  else runPoint m
end

export {
  typeof,
  ?,
  ==,
  +,
  -,
  ~,
  !,
  *,
  /,
  %,
  >,
  <,
  >=,
  <=,
  |,
  &,
  ^,
  >>,
  <<,
  >>>,
  ||,
  &&,
  undefined,
  null,
  false,
  true,
  try,
  throw,
  ImList,
  ImMap,
  ImRecord,
  Monad,
  get,
  getp,
  getIn,
  size,
  toJS,
  fromJS,
  iterate,
  Done,
  map,
  filter,
  fold,
  ~>,
  <~,
  run
}
