module core

import Immutable {
  fromJS,
  List -> ImList,
  Map -> ImMap,
  get,
  getIn
}

import ./native {
  typeof,
  ?,
  ==,
  +,
  -,
  *,
  /,
  %,
  >,
  <,
  >=,
  <=,
  ~,
  |,
  &,
  ^,
  >>,
  <<,
  >>>,
  !,
  ||,
  &&,
  undefined,
  null,
  false,
  true,
  try,
  throw,
  var,
  getv,
  setv,
  statefun,
  hasp,
  getp,
  invoke,
  ImRecord,
  monad,
  isMonad,
  transduce -> transduce',
  done,
  isDone
}

let size { .size, .length } -> case
  when typeof size == "number" -> size
  when typeof length == "number" -> length
  else 0
end

let toJS x@{ .toJS } -> case
  when typeof toJS == "function" -> .toJS x ()
  else x
end

# TODO -- reduceFor ES Map, Set etc

let reduceImList -> .asMutable (ImList()) ()
let reduceImList coll -> .asImmutable coll()
let reduceImList coll x -> .push coll x

let reduceImMap -> .asMutable (ImMap()) ()
let reduceImMap coll -> .asImmutable coll()
let reduceImMap coll [k, v] -> .set coll k v

let reducerFor coll -> case
  when coll ? ImList -> reduceImList
  when coll ? ImMap -> reduceImMap
  else reduceImList
end

let transduce coll xf ->
  transduce coll xf (reducerFor coll)

let transduce coll xf r ->
  transduce' coll (xf r)

let map f ->
  \r -> r' where
    let r' -> r()
    let r' res -> r res
    let r' res x -> r res (f x)
  end

let map f coll ->
  transduce coll (map f)

let filter f ->
  \r -> r' where
    let r' -> r()
    let r' res -> r res
    let r' res x -> case
      when f x -> r res x
      else res
    end
  end

let filter f coll ->
  transduce coll (filter f)

let reduce f init ->
  \_ -> r' where
    let r' -> init
    let r' res -> res
    let r' res x -> f res x
  end

let reduce f init coll ->
  transduce coll (reduce f init)

let take n ->
  \r -> statefun r' 0 where
    let r' _ -> [_, r()]
    let r' _ res -> [_, r res]
    let r' n' res x -> case
      when n' == n -> [n', done res]
      else [n' + 1, r res x]
    end
  end

let indexed ->
  \r -> statefun r' 0 where
    let r' _ -> [_, r()]
    let r' _ res -> [_, r res]
    let r' i res x -> [i + 1, r res [x, i]]
  end

let take11 n ->
  \r -> r' where
    let v = var 0
    let r' -> r()
    let r' res -> r res
    let r' res x -> runSync do
      n' = getv v;
      case
        when n' == n -> done res
        else do
          setv v (n' + 1);
          r res x;
        end
      end;
    end
  end

let take n coll ->
  transduce coll (take n)

let f $ g -> \x -> f (g x)

let isPromise { .then } ->
  typeof then == "function"

let runPoint p -> case
  when typeof p == "function" -> p()
  else p
end

let runMonad { current, next } -> case
  when isPromise value -> .then value runNext
  else runNext value
end where
  let value = run current
  let runNext value -> run (next value)
end

let run m -> case
  when isMonad m -> runMonad m
  else runPoint m
end

let runSync m -> case
  when isMonad m ->
    runSync (next value) where
      let { current, next } = m
      let value = runSync current
    end
  else runPoint m
end

export {
  typeof,
  ?,
  ==,
  +,
  -,
  ~,
  !,
  *,
  /,
  %,
  >,
  <,
  >=,
  <=,
  |,
  &,
  ^,
  >>,
  <<,
  >>>,
  ||,
  &&,
  undefined,
  null,
  false,
  true,
  try,
  throw,
  ImList,
  ImMap,
  ImRecord,
  monad,
  isMonad,
  get,
  hasp,
  getp,
  invoke,
  var,
  getv,
  setv,
  statefun,
  getIn,
  size,
  toJS,
  fromJS,
  transduce,
  done,
  isDone,
  map,
  filter,
  reduce,
  take,
  $,
  run,
  runSync
}
